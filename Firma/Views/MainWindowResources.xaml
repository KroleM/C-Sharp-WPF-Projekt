<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:Firma.ViewModels"
                    xmlns:vw="clr-namespace:Firma.Views"
                    >
    
    <!--TU będziemy łączyć View z ViewModel-->
    <DataTemplate DataType="{x:Type vm:WszystkieTowaryViewModel}">
        <vw:WszystkieTowaryView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:NowyTowarViewModel}">
        <vw:NowyTowarView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowaFakturaViewModel}">
        <vw:NowaFakturaView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:WszystkieFakturyViewModel}">
        <vw:WszystkieFakturyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyKontrahentViewModel}">
        <vw:NowyKontrahentView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:OperacjeMagazynoweViewModel}">
        <vw:OperacjeMagazynoweView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:SprzedazViewModel}">
        <vw:SprzedazView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyTypUmowyViewModel}">
        <vw:NowyTypUmowyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:WszystkieTypyUmowyViewModel}">
        <vw:WszystkieTypyUmowyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyTypWyplatyViewModel}">
        <vw:NowyTypWyplatyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:WszystkieTypyWyplatyViewModel}">
        <vw:WszystkieTypyWyplatyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyAdresViewModel}">
        <vw:NowyAdresView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:WszystkieAdresyViewModel}">
        <vw:WszystkieAdresyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyRodzajViewModel}">
        <vw:NowyRodzajView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:WszystkieRodzajeViewModel}">
        <vw:WszystkieRodzajeView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowaGrupaRabatowaViewModel}">
        <vw:NowaGrupaRabatowaView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:WszystkieGrupyRabatoweViewModel}">
        <vw:WszystkieGrupyRabatoweView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyRynekViewModel}">
        <vw:NowyRynekView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:WszystkieRynkiViewModel}">
        <vw:WszystkieRynkiView/>
    </DataTemplate>

    <!--TU jest koniec łączenia View z ViewModel zakładek-->
    
    
    <Style x:Key="MainHCCStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <!--Poniższy Border można zakomentować - on dodaje nazwy sekcji "Operacje" i "Przestrzeń robocza" w MainWindow-->
                    <Border 
                        Background="DodgerBlue" 
                        BorderBrush="LightGray" 
                        BorderThickness="1" 
                        CornerRadius="5" 
                        Margin="4" 
                        Padding="4" 
                        SnapsToDevicePixels="True" 
                        >
                        <TextBlock 
                            FontSize="14"
                            FontWeight="Bold"
                            Foreground="White" 
                            HorizontalAlignment="Center"  
                            Text="{TemplateBinding Content}" 
                            />
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- 
        This template ensures that content of a HeaderedContentControl 
        fills the available vertical space. 
        -->
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter 
                              DockPanel.Dock="Top"
                              ContentSource="Header" 
                              ContentTemplate="{TemplateBinding HeaderTemplate}" 
                        />
                        <ContentPresenter 
                              ContentSource="Content" 
                              ContentTemplate="{TemplateBinding ContentTemplate}" 
                              />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
  This style ensures that the borders in the main window are consistent.
  -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="WhiteSmoke" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!--
  This template explains how to render the list of commands on the left
  side in the main window (the 'Control Panel' area).
  -->
    <DataTemplate x:Key="CommandsTemplate">
        <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="6,2">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Button Content="{Binding DisplayName}" Command="{Binding Path=Command}" 
                            Height="32"
                            Margin="6"
                            Padding="4">
                        <Button.Background>
                            <RadialGradientBrush GradientOrigin="0.5,0.5" Center="0.5,0.5" 
                                RadiusX="0.5" RadiusY="0.5">
                                <GradientStop Color="Azure" Offset="0.25" />
                                <GradientStop Color="Silver" Offset="1.0" />
                            </RadialGradientBrush>
                        </Button.Background>
                        <Button.Resources>
                            <Style TargetType="Border">
                                <Setter Property="CornerRadius" Value="5"/>
                            </Style>
                        </Button.Resources>
                    </Button>
                    <!--<TextBlock Margin="2,6">
                        <Hyperlink Command="{Binding Path=Command}">
                        <TextBlock Text="{Binding Path=DisplayName}" />
                        </Hyperlink>
                    </TextBlock>-->
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <!-- 
  This template explains how to render 
  a tab item with a close button.
  -->
    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel Width="Auto">
            <Button 
                Command="{Binding Path=CloseCommand}"
                Content="X"
                Cursor="Hand"
                DockPanel.Dock="Right"
                Focusable="False"
                FontFamily="Courier" 
                FontSize="9"
                FontWeight="Bold"  
                Margin="5,1,0,0"
                Padding="0"
                VerticalContentAlignment="Bottom"
                Width="16" Height="16"                
                >
                <Button.Resources>
                    <Style TargetType="Border">
                        <Setter Property="CornerRadius" Value="5"/>
                    </Style>
                </Button.Resources>
            </Button>
            <ContentPresenter 
                Content="{Binding Path=DisplayName}" 
                VerticalAlignment="Center" 
                />
        </DockPanel>
    </DataTemplate>

    <!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl 
              IsSynchronizedWithCurrentItem="True" 
              ItemsSource="{Binding}" 
              ItemTemplate="{StaticResource ClosableTabItemTemplate}"
              Margin="4">
        </TabControl>
    </DataTemplate>

    <!--Własne style i szablony-->
    <Style x:Key="ToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style x:Key="SideButton" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Margin" Value="6"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Background" Value="LightBlue"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <Style x:Key="RamkaStandard" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="CadetBlue"/>
        <Setter Property="CornerRadius" Value="2"/>
        <Setter Property="Padding" Value="2"/>
    </Style>

</ResourceDictionary>